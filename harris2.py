# -*- coding: utf-8 -*-
"""harris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2hEhxaZkHUMNPXYk__UqvX3oSjsX1qC
"""

from PIL import Image
from numpy import *
from pylab import *

# Harris response

from scipy.ndimage import filters

def compute_harris_response(im,sigma = 3): 
  # Compute the Harris corner detector response function for each pixel
  # in a graylevel image.
  # Arguments are the image and the sigma value of Gaussian 


  # derivatives of the image matrix as convolution process with Gaussian filter
  imx = zeros(im.shape)
  filters.gaussian_filter(im, (sigma,sigma), (0,1), imx)
  imy = zeros(im.shape)
  filters.gaussian_filter(im, (sigma,sigma), (1,0), imy)

  # Construct the structure tensor M
  Mxx = imx*imx
  Mxy = imx*imy
  Myy = imy*imy

  # determinant and trace
  Mdet = Mxx*Myy - Mxy**2
  Mtr = Mxx + Myy

  # return Harris response
  return Mdet / Mtr

# Getting Harris points. Idea:
# Get points that are above a threshold value,
# and distanced with a min nr of pixels

def get_harris_points(harrisim,min_dist=10,threshold=0.1):
  
  # Input: Harris response matrix, min_dis, threshold
  # Output: List of Harris good points 

  # find top corner candidates above a threshold
  corner_threshold = harrisim.max() * threshold
  harrisim_t = (harrisim > corner_threshold) * 1


  # get coordinates of candidates and their values
  coords = array(harrisim_t.nonzero()).T
  candidate_values = [harrisim[c[0],c[1]] for c in coords]

  # sort candidates
  index = argsort(candidate_values)

  # store allowed point locations in array
  # start with a min distance from image constrains
  allowed_locations = zeros(harrisim.shape)
  allowed_locations[min_dist:-min_dist,min_dist:-min_dist] = 1

  # select the best points taking min_distance into account
  filtered_coords = []
  for i in index:
    if allowed_locations[coords[i,0],coords[i,1]] == 1: 
      filtered_coords.append(coords[i])
      # Update allowed position for the next possible points
      allowed_locations[(coords[i,0]-min_dist):(coords[i,0]+min_dist),
      (coords[i,1]-min_dist):(coords[i,1]+min_dist)] = 0
  
  #return all harris good points (their cordinates in image)
  return filtered_coords

# Plotting corners

def plot_harris_corners(image,filtered_coords):
  
  figure()
  gray()
  imshow(image)
  plot([p[1] for p in filtered_coords],[p[0] for p in filtered_coords],'g+')
  axis('off')
  show()

def get_descriptors(image,filtered_coords,wid=5):

  # For each point return pixel values around the point
  # using a neighbourhood of width 2*wid+1. (Assume points are
  # extracted with min_distance > wid).
  
  
  desc = []
  for coords in filtered_coords:
    patch = image[coords[0]-wid:coords[0]+wid+1,
              coords[1]-wid:coords[1]+wid+1].flatten()
    desc.append(patch)
  return desc

def match(desc1,desc2,threshold=0.5):
  
  # input: descriptors of image 1 and 2, and threshold value
  # For each corner point descriptor in the first image,
  # select its match to second image using
  # normalized cross correlation.

  n = len(desc1[0])

  # pair-wise distances
  d = -ones((len(desc1),len(desc2)))
  for i in range(len(desc1)):
    for j in range(len(desc2)):
      d1 = (desc1[i] - mean(desc1[i])) / std(desc1[i])
      d2 = (desc2[j] - mean(desc2[j])) / std(desc2[j])
      ncc_value = sum(d1 * d2) / (n-1)
      if ncc_value > threshold:
        d[i,j] = ncc_value
        
  # sorting matches (for one corner in image1) in ascending order
  # but (-d), so the smallest one is the one that matches the most
  # ndx contains only a number that shows which corner from image 2
  # match the best, not the ncc_value itself 
  ndx = argsort(-d)
  matchscores = ndx[:,0]

  return matchscores

def match_twosided(desc1,desc2,threshold=0.5):
  # Improve matching by comparing matches both ways
  # Remove matches that are not the best both ways 

  matches_12 = match(desc1,desc2,threshold)
  matches_21 = match(desc2,desc1,threshold)

  ndx_12 = where(matches_12 >= 0)[0]

  # remove matches that are not symmetric
  for n in ndx_12:
    if matches_21[matches_12[n]] != n:
      matches_12[n] = -1

  return matches_12

def appendimages(im1,im2,image_dis):
  #""" Return a new image that appends the two images side-by-side. """
  # select the image with the fewest rows and fill in enough empty rows
  rows1 = im1.shape[0]
  rows2 = im2.shape[0]
  cols1 = im1.shape[1]

  if rows1 < rows2:
    im1 = concatenate((im1,ones((rows2-rows1,im1.shape[1]))),axis=0)
  elif rows1 > rows2:
    im2 = concatenate((im2,ones((rows1-rows2,im2.shape[1]))),axis=0)
  # if none of these cases they are equal, no filling needed.

  im1 = concatenate((im1, np.ones((im1.shape[0], image_dis))), axis=1)

  return concatenate((im1,im2), axis=1)

def plot_matches(im1,im2,locs1,locs2,matchscores,show_below=True,image_dis = 100):
# Show a figure with lines joining the accepted matches
# input: im1,im2 (images as arrays), locs1,locs2 (feature locations),
# matchscores (as output from ’match()’),
# show_below (if images should be shown below matches).

  im3 = appendimages(im1,im2,image_dis)
  if show_below:
    im3 = vstack((im3,im3))
  
  imshow(im3)

  cols1 = im1.shape[1]
  for i,m in enumerate(matchscores):
    if m>0:
      plot(locs1[i][1],locs1[i][0],'g+')
      plot(locs2[m][1]+cols1+image_dis,locs2[m][0],'g+')
      plot([locs1[i][1],locs2[m][1]+cols1+image_dis],[locs1[i][0],locs2[m][0]],'r')
  
  axis('off')

def appendimages1(im1,im2):
 
  # select the image with the fewest rows and fill in enough empty rows
  rows1 = im1.shape[0]
  rows2 = im2.shape[0]
  if rows1 < rows2:
    im1 = concatenate((im1,ones((rows2-rows1,im1.shape[1]))),axis=0)
  elif rows1 > rows2:
    im2 = concatenate((im2,ones((rows1-rows2,im2.shape[1]))),axis=0)
  # if none of these cases they are equal, no filling needed.
  return concatenate((im1,im2), axis=1)

def plot_matches1(im1,im2,locs1,locs2,matchscores,show_below=True):
  # """ Show a figure with lines joining the accepted matches
  # input: im1,im2 (images as arrays), locs1,locs2 (feature locations),
  # matchscores (as output from ’match()’),
  # show_below (if images should be shown below matches). """
  im3 = appendimages1(im1,im2)
  if show_below:
    im3 = vstack((im3,im3))
  imshow(im3)
  cols1 = im1.shape[1]
  for i,m in enumerate(matchscores):
    if m>0:
      plot([locs1[i][1],locs2[m][1]+cols1],[locs1[i][0],locs2[m][0]],'c')
  axis('off')